#!/bin/bash
. /usr/local/bin/with-env
set -euo pipefail

function logf() { logging "PRUNE" "$1"; }

if pidof -o %PPID -x "$(basename "$0")">/dev/null; then
  >&2 logf "Already in progress. Aborting!"
  exit 3
fi
if pidof -o %PPID -x restic>/dev/null; then
  >&2 logf "'restic' process is still running. Aborting!"
  exit 3
fi

main() {
  run_commands "${PRE_COMMANDS:-}"

  stime="$(date +%s)"

  if [ -n "${RESTIC_FORGET_ARGS:-}" ]; then
    logf "Forgetting about old snapshots based on RESTIC_FORGET_ARGS"
    restic_cmd="restic forget ${RESTIC_FORGET_ARGS:-}"
    logf "$restic_cmd"
    exec 5>&1
    res=$(eval "$restic_cmd" 2>&1 |tee /dev/fd/5; exit ${PIPESTATUS[0]})
    rc=$?
    if [ $rc -ne 0 ]; then
      send_message "Restic Forget" "${rc}" "${res}" &> /dev/null
      run_commands "${POST_COMMANDS_FAILURE:-}"
      exit $rc
    fi
  fi

  logf "Starting prune..."

  restic_cmd="restic prune ${RESTIC_PRUNE_ARGS:-}"
  logf "$restic_cmd"

  set +e
  exec 5>&1
  res=$(eval "$restic_cmd" 2>&1 |tee /dev/fd/5; exit ${PIPESTATUS[0]})
  rc=$?
  set -e

  send_message "Restic Prune" "${rc}" "${res}" &> /dev/null
  if [ $rc -ne 0 ]; then
    run_commands "${POST_COMMANDS_FAILURE:-}"
    exit $rc
  fi

  logf "Finished prune in $(humanReadableDuration $stime)"

  run_commands "${POST_COMMANDS_SUCCESS:-}"
}

trap run_exit_commands EXIT
main "$@"
