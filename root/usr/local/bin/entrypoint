#!/bin/bash
. /usr/local/bin/with-env
set -euo pipefail

function logf() { logging "INIT" "$1"; }

if [[ -f "$RCLONE_CONFIG_PATH" ]]; then
  cp "$RCLONE_CONFIG_PATH" /root/.config/rclone/rclone.conf
fi

if [[ -d "$SSH_CONFIG_PATH" ]]; then
  cp -r "${SSH_CONFIG_PATH}" /root/.ssh
  chmod 700 /root/.ssh
  chmod -R u+rwX,go-rwx /root/.ssh
fi

if [[ $# -gt 0 ]]; then
  exec restic "$@"
  exit $?
fi

if [[ -z "${RESTIC_REPOSITORY:-}" ]]; then
  >&2 logf "Please set RESTIC_REPOSITORY to proceed. Exiting..."
  exit 1
fi
if [[ -z "${RESTIC_PASSWORD:-}" ]]; then
  >&2 logf "Please set RESTIC_PASSWORD to proceed. Exiting..."
  exit 1
fi

if [[ -n "${BACKUP_CRON:-}" ]] && [[ -n "${PRUNE_CRON:-}" ]]; then
  >&2 logf "BACKUP_CRON and PRUNE_CRON are mutually exclusive. Please check your configuration. Exiting..."
  exit 1
fi
if [[ -n "${BACKUP_CRON:-}" ]] && [[ -n "${CHECK_CRON:-}" ]]; then
  >&2 logf "BACKUP_CRON and CHECK_CRON are mutually exclusive. Please check your configuration. Exiting..."
  exit 1
fi
if [[ -n "${PRUNE_CRON:-}" ]] && [[ -n "${CHECK_CRON:-}" ]]; then
  >&2 logf "PRUNE_CRON and CHECK_CRON are mutually exclusive. Please check your configuration. Exiting..."
  exit 1
fi

if [[ -n "${BACKUP_CRON:-}" ]] && [[ -z "${RESTIC_BACKUP_SOURCES:-}" ]]; then
  >&2 logf "Please set RESTIC_BACKUP_SOURCES to proceed. Exiting..."
  exit 1
fi

logf "Checking repository at '${RESTIC_REPOSITORY}'..."
if restic cat config > /dev/null; then
  logf "Repository found."
else
  exit 1
fi

if [[ -n "${BACKUP_CRON:-}" ]]; then
  if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
    logf "Executing backup on startup..."
    /usr/local/bin/backup
  fi
  logf "Scheduling backup job according to BACKUP_CRON..."
  exec go-cron "$BACKUP_CRON" /usr/local/bin/backup
fi

if [[ -n "${PRUNE_CRON:-}" ]]; then
  if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
    logf "Executing prune job on startup..."
    /usr/local/bin/prune
  fi
  logf "Scheduling prune job according to PRUNE_CRON..."
  exec go-cron "$PRUNE_CRON" /usr/local/bin/prune
fi

if [[ -n "${CHECK_CRON:-}" ]]; then
  if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
    logf "Executing check job on startup..."
    /usr/local/bin/check
  fi
  logf "Scheduling check job according to CHECK_CRON..."
  exec go-cron "$CHECK_CRON" /usr/local/bin/check
fi

>&2 logf "No valid operating mode configured! Exiting..."
exit 1
